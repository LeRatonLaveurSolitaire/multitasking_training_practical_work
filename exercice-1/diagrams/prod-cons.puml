@startuml
!pragma teoz true
box "Terminal process"
participant bash



box "AcquisitionManager" #lightblue
participant "Main" as main
participant "AcquisitionManager" as AcqManager
participant "producer[i]:pthread_t" as producer
participant "mutex_write:pthread_mutex_t" as mutex
participant "mutex_index:pthread_mutex_t" as mutex2
participant "sem_empty:sem(255)" as sem_empty
participant "sem_full:sem(0)" as sem_full
participant "index:int" as index
participant "buffer_index:int" as bufferlecture
participant "buffer_data:MSG_BLOCK" as buffer
end box

box "MessageAdder" #lightgreen
participant "consumer:pthread_t" as consumer
participant "messageAdder" as messageAdder
participant "Main" as main2
end box
end box

activate bash
bash -> main: ./AcquisitionManager
activate main

main->AcqManager: AcquisitionManagerInit
activate AcqManager

AcqManager-> buffer:création
activate buffer

AcqManager-> bufferlecture:création
activate bufferlecture

AcqManager-> index:création
activate index

AcqManager-> producer:pthread_create
activate producer #FFBBBB

producer -> AcqManager: writeMessage
note over AcqManager : writeMessage


AcqManager ->sem_empty :sem_wait
activate sem_empty
return


AcqManager-> mutex : pthread_mutex_lock
activate mutex
return

AcqManager ->index: récupère et incrémente
activate index
return


AcqManager-> mutex : pthread_mutex_unlock
activate mutex
return

AcqManager ->buffer : ecriture de la data
activate buffer
return

AcqManager-> mutex2 : pthread_mutex_lock
activate mutex2
return

AcqManager ->bufferlecture: écriture de l'index
activate bufferlecture
return

AcqManager-> mutex2 : pthread_mutex_unlock
activate mutex2
return

AcqManager->sem_full: sem_post
activate sem_full
return

AcqManager -> producer: return

producer -> AcqManager: pthread_exit
deactivate producer


bash->main2 :./MessageAdder
activate main2

main2->messageAdder: messageAdderInit
activate messageAdder

messageAdder->consumer:pthread_create
activate consumer #FFBBBB


consumer-> AcqManager :getMessage
note over AcqManager : get message

AcqManager->sem_full: sem_wait
activate sem_full
return

AcqManager ->index: récupère l'index du buffer index
activate index
return

AcqManager ->bufferlecture: récupère l'index pour le buffer data
activate bufferlecture
return

AcqManager ->buffer : Lecture
activate buffer
return

AcqManager->sem_empty: sem_post
activate sem_empty
return

AcqManager->consumer: return value



consumer -> messageAdder: pthread_exit
deactivate consumer

messageAdder->main2:return
deactivate messageAdder

main2->bash: return
deactivate main2


AcqManager->main : return
deactivate AcqManager

main->bash: return
deactivate main

@enduml